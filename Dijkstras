#include<iostream>
#include<climits>

using namespace std;
class disj{
int n,**A; bool *visited;int *distance;
public:
disj(){
cout<<"\nEnter the no. of vertices ";
cin>>n;
}
void init_adj() {

            A=new int *[n];
            for (int i=0;i<n;i++) {
            A[i]=new int (n);
             }
            for (int i=0;i<n;i++) {
            for (int j=0; j<n;j++){
             A[i][j]=0;
            }}
         }
         
         
void get_path(){
 
 int len,x,y,p; 
 cout<<"\nEnter the no. of path ";
 cin>>p;
    for(int k=0;k<p;k++){
     cout<<"Enter the Path & path length ";
     cin>>x>>y>>len;
     A[x][y]=len;
    A[y][x]=len;
}
cout<<endl;
for(int i=0;i<n;i++){
for(int j=0;j<n;j++){
cout<<A[i][j]<<" ";}
cout<<endl;
}
}
int find_min_ver(){
int x=-1;
for(int i=0;i<n;i++){
if(!visited[i]&&(x==-1||distance[i]<distance[x]))
x=i;
}
cout<<"\ngfb "<<x;
return x;
}
void dijkstra(){
int dis;
visited=new bool[n];
distance =new int[n];
for(int i=0;i<n;i++){
visited[i]=false;
distance[i]=INT_MAX;
}
distance[0]=0;
for(int i=0;i<n-1;i++){
    int min_ver=find_min_ver();
visited[min_ver]=true;
for(int j=0;j<n;j++){
     if(A[min_ver][j]!=0&&!visited[j]){
 
 dis=distance[min_ver]+A[min_ver][j];
if(dis<distance[j]){
distance[j]=dis;}
}
}
}
}
 
 void display(){
  for(int i=0;i<n;i++){
  cout<<i<<" "<<distance[i]<<endl;
 }
 }
};

int main(){
disj d;
d.init_adj();
d.get_path();
d.dijkstra();
d.display();
}

