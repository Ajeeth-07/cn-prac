#include <iostream>
#include<random>
#include<climits>
#include<cmath>

using namespace std;

string global="";

int glsq=0;


class info{
    public:
    string s;
    vector<int> arr;
    int size;
    public:
     
    info(string inc,int frame){
        this->size=inc.size();
        s=inc;
       
        int temp=0;
        for(int i=0;i<size;i++){
            arr.push_back(temp);
            temp++;
            if(temp>frame){
                temp=0;
            }
           
        }
       
       
    }
    info(){
        this->size=0;
        s="";
       
       
       
    }
    info(int size,int frame){
        s="";
        this->size=size;
        int temp=0;
        for(int i=0;i<size;i++){
            arr.push_back(temp);
            temp++;
            if(temp>frame){
                temp=0;
            }
           
        }
        
    }
    void add(char c,int ack){
        s+=c;
        arr.push_back(ack);
       
    }
    void display(){
        cout<<s<<endl;
        // for(int i=0;i<size;i++){
        // cout<<arr[i]<<" ";
        // }
    }
    void display2(){
        cout<<"Sequence no is "<<endl;
        for(int i=0;i<arr.size();i++){
            cout<<arr[i]<<" ";
        }
        cout<<endl;
       
    }
};


int receiver(char c,info &ans,int pt,int cas,int ack,int frame){
    int t=INT_MAX;
    
    if(glsq==ack){
        
        
        
        if(cas==1){
            if(glsq==frame){
               glsq=0;
            }
            else{
                glsq++;
            }
        
       if(ans.s.size() == pt )
        ans.add(c,ack);
        cout<<"(Receiver) - Receiver received "<<c<<" with seq no "<<ack<<endl;
          cout<<"(Receiver)- Msg status "<<endl;
        ans.display();

        t=glsq;
        cout<<"(Receiver)- Sent Acknowledgement with seq no "<<glsq<<endl;
       
       
       
       
            return glsq;
        }
        else if(cas==2){
            cout<<"(Receiver)- Frame receeived with error "<<endl;
           
            return -1;
        }
       else if(cas==3){
           //cout<<"(Receiver) - Frame Lost"<<endl;
         
            return -1;
        }
        else {
            cout<<"(Receiver)- receeived "<<c<<" with seq no "<<ack<<endl;
            if(ans.s.size()<=pt && ans.s[pt]!=c){
                ans.add(c,ack);
                cout<<"(Receiver)- Saved "<<c<<" at seq no "<<pt<<" in the Receiver end"<<endl;
            }
            else{
                cout<<"frame saved already so discarded"<<endl;
            }
              cout<<"(Receiver)- Msg status "<<endl;
            ans.display();
           
           
        //   char temp;
        //     if(ack=='1'){
        //         temp='0';
        //     }
        //     else{
        //         temp='1';
        //     }https://www.onlinegdb.com/online_c++_compiler#tab-stdin

       int temp=ack;
       if(ack==frame){
         cout<<"(Receiver)- Acknowledgement sent with seq no "<<0<<endl;
       }
       else{
           cout<<"(Receiver)- Acknowledgement sent with seq no "<<temp+1<<endl;
       }
        // if(t==INT_MAX){
        //     // glsq=1;
        //     cout<<"(Receiver)- Acknowledgement sent with seq no "<<1<<endl;
        // }
        // else{
        //     cout<<"(Receiver)- Acknowledgement sent with seq no "<<t+1<<endl;
        // }   
            
           
            return -1;
        }
        
    }
    else{
               // means we have got that frame which reciver currently does not need hence it would discard that frame  
        if(cas==1 || cas==4){
            cout<<"Receiver: Received frame with sq no "<<ack<<" required sq "<<glsq<<" hence discarded"<<endl;
            return -1;
        }
        else if(cas==2){
            // here frame Lost
            cout<<"Receiver: Received frame with sq no "<<ack<<" required sq "<<glsq<<" hence discarded"<<endl;
            return -1;
        }
        else if(cas==3){
            return -1;
        }
    }
    
   
    
    
}


info communicate(info send,int frame){
    glsq=0;
    //info send(msg);
    string msg=send.s;
   
    info ans(msg.size(),frame);
   
    send.display();
    send.display2();
    //receive.display();
   
   
   
    
   
   
   int st=0;
   int end=frame-1;
   
   if(msg.size()<(frame+1)){
      end=msg.size()-1;
   }
   int pt=0;
   while(true){
       bool complete=false;
      int i=pt;
      cout<<"frames in windows are : "<<endl;
      for(int i=pt;i<=end;i++){
          cout<<msg[i]<<" ";
      }
      cout<<endl;
      while(i<=end){
          int cas=1+rand()%4;
          int sack=send.arr[i];
            cout<<"case is "<<cas<<endl;
             cout<<"(Sender)- sent "<<send.s[i]<<" with sequence no "<<sack<<endl;
             
             
             int rack;
             
                  if(cas==1){
                    rack=receiver(send.s[pt],ans,pt,cas,sack,frame);
                    if(rack!=-1){
                      cout<<"(Sender)- Acknowledgement Received with seq no "<<rack<<endl;
                     
                    }
                    st++;
                    // here update the i 
                    i++;
                    
                    if(rack!=-1){
                        if(end+1<msg.size()){
                          end++;
                       }
                    }
                   
                   
                    
                    //pt++;
                }
                if(cas==2){
                    rack=receiver(send.s[pt],ans,pt,cas,sack,frame);
                    
                    // here no window size increased 
                    // but i wil increase bcz sender sends the frame
                    i++;
                    
                   // cout<<"(Sender) -timer expired"<<endl;
                }
                if(cas==3){
                    rack=receiver(send.s[pt],ans,pt,cas,sack,frame);
                    
                    i++;
                  //  cout<<"(Sender) -timer expired"<<endl;
                }
                if(cas==4){
                    rack=receiver(send.s[pt],ans,pt,cas,sack,frame);
                    i++;
                   
                 //   cout<<"(Sender) -timer expired"<<endl;
                   
                }
             
                 cout<<endl;
                 if(sack!=rack && rack!=-1){
                   pt++;
                   if(pt==msg.size()){
                       complete=true;
                       break;
                   }
                 }
                
      }
      if(complete){
          break;
      }
       cout<<" ****Sending again *****"<<endl;
      
       
   }
       
   
   
   
//     int pt=0;
//     while(pt<msg.length()){
//         int cas=1+rand()%4;
       
//         char sack=send.arr[pt];
       
       
//         // cross-check
//         cout<<"case is "<<cas<<endl;
     
       
//       // cout<<endl;
//       // cout<<endl;
       
//         cout<<"(Sender)- sent "<<send.s[pt]<<" with sequence no "<<sack<<endl;
       
//         char rack;
//         if(cas==1){
//             rack=receiver(send.s[pt],ans,pt,cas,sack);
//             cout<<"(Sender)- Acknowledgement Received with seq no "<<rack<<endl;
//             //pt++;
//         }
//         if(cas==2){
//             rack=receiver(send.s[pt],ans,pt,cas,sack);
//             cout<<"(Sender) -timer expired"<<endl;
//         }
//         if(cas==3){
//             rack=receiver(send.s[pt],ans,pt,cas,sack);
//             cout<<"(Sender) -timer expired"<<endl;
//         }
//         if(cas==4){
//             rack=receiver(send.s[pt],ans,pt,cas,sack);
           
//             cout<<"(Sender) -timer expired"<<endl;
           
//         }
     
//          cout<<endl;
       
//         if(sack!=rack && rack!=-1){
//             pt++;
//         }
//     }
   
//   // ans.display();
//     cout<<endl;
//     cout<<endl;
//     ans.size=ans.s.size();
     return ans;
   
   
}










// receiver side layers



void RnetworkLayer(string s){
   cout<<"Here in Network layer of Receiver and collecting the frames to convert into complete msg "<<endl;
    global+=s;
    global+=" ";

}


void RdataLinkLayer(info get,int frame){
   cout<<"Here in Data link layer of Receiver and sending frames to the network layer"<<endl;
   RnetworkLayer(get.s);
}


void  RphysicalLayer(info get,int frame){
   cout<<"At Receiver's physical layer "<<endl;
   RdataLinkLayer(get, frame);

}

//  sender physical to Receiver physical

void SphysicalRlayer(info send,int frame){
    cout<<"Actual communication between physical layer of sender and receiver"<<endl;
   info receive=communicate(send,frame);
   RphysicalLayer(receive,frame);
}







// sender side layers

void SphyscialLayer(info &send,int frame){
   
    cout<<"Here in Sender's Physical Layer"<<endl;
   
    SphysicalRlayer(send,frame);
       
   
   
}

void SdataLinkLayer(string msg,int frame){
   
    cout<<"Here in the Sender's Data link Layer"<<endl;
   
    info send(;
   
    SphyscialLayer(send,frame);
}

void SnetworkLayer(string input,int frame){
    cout<<"Here in Network Layer of Sender"<<endl;
    int id=0;
   while(id<input.length()){
    int tempid=id;
    string temp="";
    while(tempid<input.length() && input[tempid]!=' '){
        temp+=input[tempid];
        tempid++;
    }
    cout<<"Now sender working on word "<<temp<<endl;
   
    SdataLinkLayer(temp,frame);
   // output+=communicate(temp).s;
    //output+=' ';
   
    id=tempid+1;
   }
   
}







void sender(string input,int frame){
     SnetworkLayer(input,frame);
}


int main()
{
   
     string input;
     
     string output="";
   cout<<"Enter the line"<<endl;
   getline(cin,input);
  // cout<<input<<endl;
   
 
 
 
 
   // sender func calling

  cout<<"Enter the no of bits represented  "<<endl;
  int bits;
  cin>>bits;

  
  
  int frame=pow(2,bits);
  frame=frame-1;
  
 
   sender(input,frame);
 
 
   
 
  // extract words from the line from the line
   
  // Now from the extracted words we need to pass it to the sender and receiver communication
 
  //communicate(word);
    cout<<global<<endl;
   
    return 0;
}



